name: CI

# Continuous Integration pipeline for cma-rust workspace
# Triggers on pushes to main branches and pull requests
# Executes comprehensive testing via Docker to ensure environment consistency
on:
  push:
    branches: [ main, develop]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_BUILDKIT: 1

jobs:
  # Single job: Docker container handles ALL CI tasks (format, clippy, test, build)
  # This approach ensures consistent environment and reduces CI configuration complexity
  docker-ci:
    name: Docker CI
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout code
        # Download source code with full git history for comprehensive builds
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Build stage builder : fait fmt + clippy + test + build
      # Si une étape échoue, le build échoue = CI rouge
      - name: Build and test (builder stage does everything)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/ci.Dockerfile
          target: builder
          push: false
          load: true
          tags: cma-rust-builder:latest
      
      # Extraire les binaires depuis le conteneur
      - name: Build with ci.Dockerfile
        # Execute comprehensive CI pipeline via Docker multi-stage build
        # This container automatically runs all quality checks and builds
        run: docker build -f docker/ci.Dockerfile -t cma-rust-ci .
        
      - name: Extract binaries
        # Extract compiled artifacts from Docker container for distribution
        # ci.Dockerfile automatically executed:
        # - cargo fmt --check     (code formatting validation)
        # - cargo clippy --       (linting with warnings as errors)  
        # - cargo test --all      (comprehensive test suite)
        # - cargo build --release (optimized production builds)
        run: |
          # Create temporary container to access build artifacts
          docker create --name extract-container cma-rust-ci
          docker cp extract-container:/app/target/release/loggerd ./loggerd
          docker cp extract-container:/app/target/release/waydash ./waydash || true
          docker rm extract-container
          
          ls -la loggerd waydash 2>/dev/null || echo "Some binaries might not exist yet"
      
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: binaries-x86_64
          path: binaries/*
          retention-days: 30
      
      # Build images runtime (optionnel)
      - name: Build loggerd runtime image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/ci.Dockerfile
          target: loggerd-runtime
          push: false
          load: true
          tags: cma-rust-loggerd:latest
      
      - name: Build waydash runtime image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/ci.Dockerfile
          target: waydash-runtime
          push: false
          load: true
          tags: cma-rust-waydash:latest
      
      - name: Summary
      - name: Upload binaries
        # Store compiled binaries as GitHub Actions artifacts
        # Available for download and use in deployment workflows
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ github.sha }}
          path: |
            loggerd
            waydash
          if-no-files-found: warn
          
      - name: Summary
        # Generate comprehensive CI summary for GitHub interface
        # Provides clear feedback on build results and available artifacts
        run: |
          echo "✅ CI passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Generated Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`cma-rust-ci\` : Docker image with all binaries built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Available Binaries" >> $GITHUB_STEP_SUMMARY
          echo "- \`loggerd\` : System logging daemon with HTTP API" >> $GITHUB_STEP_SUMMARY
          echo "- \`waydash\` : Wayland dashboard for system metrics (if built)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Quality Checks Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code formatting (cargo fmt)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linting (cargo clippy)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test suite (cargo test)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Release build (cargo build --release)" >> $GITHUB_STEP_SUMMARY
